{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					}
				],
				"name": "RewardsClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensStaked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newAmount",
						"type": "uint256"
					}
				],
				"name": "UpdatedMinStakeAmount",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldDenominator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDenominator",
						"type": "uint256"
					}
				],
				"name": "UpdatedRewardRatio",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldTimeUnit",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTimeUnit",
						"type": "uint256"
					}
				],
				"name": "UpdatedTimeUnit",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "claimRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_numerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_denominator",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_rewardsAvailableInContract",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					}
				],
				"name": "getStakeInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_tokensStaked",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_rewards",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTimeUnit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardTokenDecimals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_numerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_denominator",
						"type": "uint256"
					}
				],
				"name": "setRewardRatio",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"name": "setTimeUnit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "stakers",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountStaked",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timeOfLastUpdate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "unclaimedRewards",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "conditionIdOflastUpdate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakersArray",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingTokenDecimals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"RewardsClaimed(address,uint256)": {
					"details": "Emitted when a staker claims staking rewards."
				},
				"TokensStaked(address,uint256)": {
					"details": "Emitted when tokens are staked."
				},
				"TokensWithdrawn(address,uint256)": {
					"details": "Emitted when a tokens are withdrawn."
				},
				"UpdatedMinStakeAmount(uint256,uint256)": {
					"details": "Emitted when contract admin updates minimum staking amount."
				},
				"UpdatedRewardRatio(uint256,uint256,uint256,uint256)": {
					"details": "Emitted when contract admin updates rewardsPerUnitTime."
				},
				"UpdatedTimeUnit(uint256,uint256)": {
					"details": "Emitted when contract admin updates timeUnit."
				}
			},
			"kind": "dev",
			"methods": {
				"claimRewards()": {
					"details": "See {_claimRewards}. Override that to implement custom logic.             See {_calculateRewards} for reward-calculation logic."
				},
				"getStakeInfo(address)": {
					"params": {
						"_staker": "Address for which to calculated rewards."
					},
					"returns": {
						"_rewards": "       Available reward amount.",
						"_tokensStaked": "  Amount of tokens staked."
					}
				},
				"setRewardRatio(uint256,uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_denominator": "Reward ratio denominator.",
						"_numerator": "Reward ratio numerator."
					}
				},
				"setTimeUnit(uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_timeUnit": "New time unit."
					}
				},
				"stake(uint256)": {
					"details": "See {_stake}. Override that to implement custom logic.",
					"params": {
						"_amount": "Amount to stake."
					}
				},
				"unstake(uint256)": {
					"details": "See {_withdraw}. Override that to implement custom logic.",
					"params": {
						"_amount": "Amount to withdraw."
					}
				}
			},
			"stateVariables": {
				"nativeTokenWrapper": {
					"details": "The address of the native token wrapper contract."
				},
				"nextConditionId": {
					"details": "Next staking condition Id. Tracks number of conditon updates so far."
				},
				"rewardTokenDecimals": {
					"details": "Decimals of reward token."
				},
				"stakers": {
					"details": "Mapping staker address to Staker struct. See {struct IStaking20.Staker}."
				},
				"stakersArray": {
					"details": "List of accounts that have staked that token-id."
				},
				"stakingConditions": {
					"details": "Mapping from condition Id to staking condition. See {struct IStaking721.StakingCondition}"
				},
				"stakingToken": {
					"details": "Address of ERC20 contract -- staked tokens belong to this contract."
				},
				"stakingTokenBalance": {
					"details": "Total amount of tokens staked in the contract."
				},
				"stakingTokenDecimals": {
					"details": "Decimals of staking token."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claimRewards()": {
					"notice": "Claim accumulated rewards."
				},
				"getRewardTokenBalance()": {
					"notice": "View total rewards available in the staking contract."
				},
				"getStakeInfo(address)": {
					"notice": "View amount staked and rewards for a user."
				},
				"setRewardRatio(uint256,uint256)": {
					"notice": "Set rewards per unit of time.           Interpreted as (numerator/denominator) rewards per second/per day/etc based on time-unit.           For e.g., ratio of 1/20 would mean 1 reward token for every 20 tokens staked."
				},
				"setTimeUnit(uint256)": {
					"notice": "Set time unit. Set as a number of seconds.           Could be specified as -- x * 1 hours, x * 1 days, etc."
				},
				"stake(uint256)": {
					"notice": "Stake ERC20 Tokens."
				},
				"unstake(uint256)": {
					"notice": "Withdraw staked ERC20 tokens."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@thirdweb-dev/contracts/extension/Staking20.sol": "Staking20"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@thirdweb-dev/contracts/eip/interface/IERC20.sol": {
			"keccak256": "0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592",
				"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/extension/Staking20.sol": {
			"keccak256": "0x081207efbfa2b7c2223b09f5c4a0fefbc7129dbefc1e95ccbb938170d30ea813",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://0236c7842826567d6a8028fe720f1c0372056197d3cdbc46ff86e4722a45b66c",
				"dweb:/ipfs/QmZ4AbD974eA7zvmZXnAGNm3bNjkgb5EVh2UGgy8qWbr9C"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/extension/interface/IStaking20.sol": {
			"keccak256": "0xc3c0db46f15ae26be837718fe5f8ef0cab17e3e1987de836af71cc0b59b78b50",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://827461dedbe4868983273013999746cf0c04fe9abb156fb51bdf89e1e23c50cc",
				"dweb:/ipfs/QmXFo3A1pm1yq6EpxXXsFH2BF5QT1mEme3Ru2NALjbw81J"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/interfaces/IWETH.sol": {
			"keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
				"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol": {
			"keccak256": "0x4b0dc7c0ca9e463b2efbf3e8177a40bab333f5669ab368cad98534678a81cbc3",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1d5e91c28bb509afcbb3da66bbbf03465de5b168937b604f1cab63397472388a",
				"dweb:/ipfs/QmTqs9U5eWAQzJxVwD9pMQAtjXxK59cvJ4xzYMUnfVCsp5"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/lib/TWAddress.sol": {
			"keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
				"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/openzeppelin-presets/security/ReentrancyGuard.sol": {
			"keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
				"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x293d8d7a3502950df5b9d6d36fcad85ca758f06dd946cdc8645cac1aa56686c4",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cd805dbdcf6b7cebcd47201badbd7f7464e49eec51c4e0627b899ece1b04790",
				"dweb:/ipfs/QmRP3JYK4wzDaRrk9so6m433TuqHW9axAXLLnQAjCp2Gs4"
			]
		},
		".deps/npm/@thirdweb-dev/contracts/openzeppelin-presets/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		}
	},
	"version": 1
}